Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

 

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Note: 

1 <= preorder.length <= 100
The values of preorder are distinct.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode rootNode = new TreeNode(preorder[0]);
        
        for(int i = 1; i < preorder.length; i++) {
            TreeNode newNode = new TreeNode(preorder[i]);
            TreeNode tempNode = rootNode;
            TreeNode prevNode = null;
            boolean isLeft = false;
            while(tempNode != null) {
                prevNode = tempNode;
                if(tempNode.val > preorder[i]) {
                    tempNode = tempNode.left;
                    isLeft = true;
                } else {
                    tempNode = tempNode.right;
                    isLeft = false;
                }
            }
            if(isLeft) {
                prevNode.left = newNode;
            } else {
                prevNode.right = newNode;
            }
        }
        
        return rootNode;
    }
}
