/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1 
*/

class Solution {
    public int search(int[] nums, int target) {
        return binarySearch(nums, target);
    }
    
    int binarySearch(int arr[], int x) 
    { 
        int l = 0, r = arr.length - 1; 
        while (l <= r) {
            int m = l + (r - l) / 2;
            //System.out.println("l=" + l);
            //System.out.println("r=" + r);
            //System.out.println("m=" + m);
  
            // Check if x is present at mid
            if (arr[m] == x) 
                return m; 
            
            if(arr[l] <= arr[m]) {
                if(x < arr[m] && x >= arr[l]) {
                    r = m - 1;
                } else {
                    l = m + 1; 
                }
            }
            
            if(arr[m] <= arr[r]) {
                if(x > arr[m] && x <= arr[r]) {
                    l = m + 1; 
                } else {
                    r = m - 1;
                }
            }
            
            

                
        } 
  
        // if we reach here, then element was 
        // not present 
        return -1; 
    } 
}
